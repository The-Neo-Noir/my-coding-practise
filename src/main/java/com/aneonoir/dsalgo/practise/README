Don't use == to float or double number to compare
Use Float.compare or Double.compare

(Math.log10(8) / Math.log10(2)); will give you 3

perfect square has odd factors


SET INTERFACE:
    contains(char+"")

Map:
     public Collection<V> values(): returns only values in the map

You can use        Character.isUpperCase() or Character.isLowerCase()

=======================
STRINGS
=======================
asci code : a-97
            z-122
--------------------

com.aneonoir.dsalgo.practise.strings.String substring ( not subString() ) first index is inclusive , but last index is exclusive

------------
StringBuffer.equals(com.aneonoir.dsalgo.practise.strings.String) will not lead to true , even if they are true
----------
((char)(i+97)) : to convert to char ie 'a' when i=0;
--------
what is lexicographically ??????
-------


array: find all the rows , columns and diagonals of a given square matrix
    diagonal1: when i==j
    diagonal2: when i+j=array.length;
    rows= a[i][j]
    columns a[j][i];

assertArrayEquals is used for equality check of arrays,.

array.legth ; will give you the rows it has
array[0].length; will give you the column it has


Explore whatis merge in hashmap


Character::getNumericValue

Tree:
    A top view ,


Math:
    GCD: greatest common divisor
    GCF/HCF: greatest common factor
    LCD: Lowest common denominator
    LCM: lowest common multiple

 Integer.toHexString


What are you doing wrong ?
 int [] sortedHieghts=heights;
        Arrays.sort(sortedHieghts);

Use Arrays.copyOf() when you want a copy of the array .



Java concurrent modification exception:


This will occur if the underlying collection that is being iterated over is modified by anything other than the Iterator itself.

Iterator it = map.entrySet().iterator();
while (it.hasNext())
{
   Entry item = it.next();
   map.remove(item.getKey());
}

This will throw a ConcurrentModificationException when the it.hasNext() is called the second time.

The correct approach would be

   Iterator it = map.entrySet().iterator();
   while (it.hasNext())
   {
      Entry item = it.next();
      it.remove();
   }
Assuming this iterator supports the remove() operation.



======
Strings
======

toLowerCase() : converts the string to lowercase
Character.isUpperCase(c) : returns true if the the given character is upper case .


